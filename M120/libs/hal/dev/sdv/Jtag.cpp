/*****************************************************************************************************
   Copyright (C) 2012, Oplink Communications Inc.
   FileName:      Jtag.cpp
   Author:        Zhu Weian
   Date:          2020-10-09
   Version:       1.0
   Description:
   Function List:

   History:
   [Zhu Weian] [2020-10-09] [1.0] [Creator]


*****************************************************************************************************/

#include "Jtag.h"
#include "./jtag/ivm_eprom.h"
#include "./jtag/vmopcode.h"
#include "BoardCmd.h"

#define UPGRADE_REG                     0x3C   /* SCC CPLD JTAG */
/*#define UPGRADE_REG                     0x50   / * BP CPLD JTAG * / */

#define JTAG_PIN_TDI                    0x01
#define JTAG_PIN_TCK                    0x02
#define JTAG_PIN_TMS                    0x04

#define JTAG_PIN_TDI_BIT                BIT_0
#define JTAG_PIN_TCK_BIT                BIT_1
#define JTAG_PIN_TMS_BIT                BIT_2
#define JTAG_PIN_TRST_BIT               BIT_4
#define JTAG_PIN_TDO_BIT                BIT_3


bool
CJtag::Upgrade(uint8_t *pucImg, uint32_t uiLen)
{
    int32_t iRet = 0;

    if (nullptr == pucImg) {
        LOG_WRITE(EN_LOG_ERROR, "input null");
        goto ERR_LABEL;
    }

    /* Save the image information firstly                                       */
    ms_pucImg = pucImg;
    ms_uiImgLen = uiLen;
    ms_uiImgPos = 0;

    if (nullptr == m_stpLogicDrv) {
        LOG_WRITE(EN_LOG_NOTICE, "m_stpLogicPtr is nullptr.");
    }
    LOG_WRITE(EN_LOG_NOTICE, "jtag upgrade addr:0x%x,m_uiBaseAddr:0x%x", UPGRADE_REG + m_uiBaseAddr, m_uiBaseAddr);
    if ( 0 == m_uiBaseAddr) {
        m_stpLogicDrv->WriteBit(UPGRADE_REG + m_uiBaseAddr, JTAG_PIN_TRST_BIT, 1); /*qingy 2022 scc */
    } else {
        m_stpLogicDrv->WriteBit(UPGRADE_REG + m_uiBaseAddr, JTAG_PIN_TRST_BIT, 0); /*qingy 2022 fpc */
    }

    iRet = ispVM(this);
    if (iRet != 0) {
        LOG_WRITE(EN_LOG_ERROR, "JTAG CPLD Error, iRet = %d", iRet);
        goto ERR_LABEL;
    }
    LOG_WRITE(EN_LOG_NOTICE, "jtag upgrade addr:0x%x,m_uiBaseAddr:0x%x", UPGRADE_REG + m_uiBaseAddr, m_uiBaseAddr);
    if ( 0 == m_uiBaseAddr) {
        m_stpLogicDrv->WriteBit(UPGRADE_REG + m_uiBaseAddr, JTAG_PIN_TRST_BIT, 0); /*qingy 2022 scc */
    } else {
        m_stpLogicDrv->WriteBit(UPGRADE_REG + m_uiBaseAddr, JTAG_PIN_TRST_BIT, 1); /*qingy 2022 fpc */
    }

    return true;

ERR_LABEL:

    return false;
}

bool
CJtag::Reset()
{
#if 0
    uint8_t ucReload[] = {
        0x65, 0xde, 0x35, 0x5f, 0x5f, 0x5f, 0x5f, 0x31, 0x32, 0x2e, 0x31, 0xf1, 0x19, 0xc8, 0xf, 0x8,
        0x0, 0x6, 0x0, 0x9, 0x0, 0x7, 0x0, 0x2, 0x3, 0x3, 0x2, 0xb, 0xe8, 0x7, 0x10, 0x1,
        0x11, 0x8, 0x13, 0x0, 0x7, 0x70, 0x12, 0x20, 0x13, 0x1, 0x0, 0x4, 0x14, 0x0, 0xc2, 0xb,
        0xd4, 0x80, 0x15, 0x2, 0xff, 0x4, 0x70, 0x11, 0x8, 0x13, 0x0, 0x9e, 0x70, 0x10, 0x1, 0x1b,
        0x2, 0x1a, 0xe8, 0x87, 0x2, 0x11, 0x8, 0x13, 0x0, 0xff, 0x70, 0x10, 0x1, 0x1b, 0x64, 0x1a,
        0x88, 0xa7, 0x2, 0x7f
    };

    uint8_t ucReload[] = {
        0x65, 0x32, 0x66, 0x5F, 0x5F, 0x5F, 0x5F, 0x31, 0x32, 0x2E, 0x31, 0xF1, 0x19, 0x98, 0x0C, 0x08,
        0x00, 0x06, 0x00, 0x09, 0x00, 0x07, 0x00, 0x02, 0x03, 0x03, 0x02, 0x0B, 0xE8, 0x07, 0x10, 0x01,
        0x11, 0x08, 0x13, 0x00, 0x07, 0x70, 0x12, 0x20, 0x13, 0x01, 0x00, 0x04, 0x14, 0x00, 0xC2, 0x03,
        0xD4, 0x86, 0x15, 0x02, 0xFF, 0x04, 0x70, 0x11, 0x08, 0x13, 0x00, 0x9E, 0x70, 0x10, 0x01, 0x1B,
        0x02, 0x1A, 0xE8, 0x87, 0x02, 0x11, 0x08, 0x13, 0x00, 0xFF, 0x70, 0x10, 0x01, 0x1B, 0x64, 0x1A,
        0x88, 0xA7, 0x02, 0x7F
    };
#else
/*
    uint8_t ucReload[] = {
        0x65, 0xD0, 0xD5, 0x5F, 0x5F, 0x5F, 0x5F, 0x31, 0x32, 0x2E, 0x31, 0xF1, 0x19, 0xC8, 0x0F, 0x08,
        0x00, 0x06, 0x00, 0x09, 0x00, 0x07, 0x00, 0x02, 0x03, 0x03, 0x02, 0x0B, 0xE8, 0x07, 0x10, 0x01,
        0x11, 0x08, 0x13, 0x00, 0x07, 0x70, 0x12, 0x20, 0x13, 0x01, 0x00, 0x04, 0x14, 0x00, 0xC2, 0x0B,
        0xD4, 0x86, 0x15, 0x02, 0xFF, 0x04, 0x70, 0x11, 0x08, 0x13, 0x00, 0x9E, 0x70, 0x10, 0x01, 0x1B,
        0x02, 0x1A, 0xE8, 0x87, 0x02, 0x11, 0x08, 0x13, 0x00, 0xFF, 0x70, 0x10, 0x01, 0x1B, 0x64, 0x1A,
        0x88, 0xA7, 0x02, 0x7F
    };
*/
	uint8_t ucReload[] = {0x65, 0xFC, 0x12, 0x5F, 0x5F, 0x5F, 0x5F, 0x31, 0x32, 0x2E, 0x31, 0xF1, 0x63, 0x47, 0x44, 0x69,
0x61, 0x6D, 0x6F, 0x6E, 0x64, 0x20, 0x44, 0x65, 0x70, 0x6C, 0x6F, 0x79, 0x6D, 0x65, 0x6E, 0x74,
0x20, 0x54, 0x6F, 0x6F, 0x6C, 0x20, 0x33, 0x2E, 0x31, 0x32, 0x0A, 0x43, 0x52, 0x45, 0x41, 0x54,
0x49, 0x4F, 0x4E, 0x20, 0x44, 0x41, 0x54, 0x45, 0x3A, 0x20, 0x57, 0x65, 0x64, 0x20, 0x44, 0x65,
0x63, 0x20, 0x30, 0x37, 0x20, 0x31, 0x36, 0x3A, 0x35, 0x35, 0x3A, 0x35, 0x39, 0x20, 0x32, 0x30,
0x32, 0x32, 0x0A, 0x0A, 0x00, 0x19, 0x20, 0x56, 0x01, 0x08, 0x00, 0x06, 0x00, 0x09, 0x00, 0x07,
0x00, 0x02, 0x03, 0x03, 0x02, 0x0B, 0xE8, 0x07, 0x10, 0x01, 0x11, 0x08, 0x13, 0x00, 0x07, 0x70,
0x12, 0x20, 0x13, 0x01, 0x00, 0x04, 0x14, 0x00, 0xC2, 0x0B, 0xD4, 0x86, 0x15, 0x02, 0xFF, 0x04,
0x70, 0x11, 0x08, 0x13, 0x00, 0x9E, 0x70, 0x10, 0x01, 0x1B, 0x02, 0x1A, 0xE8, 0x87, 0x02, 0x11,
0x08, 0x13, 0x00, 0xFF, 0x70, 0x10, 0x01, 0x1B, 0x64, 0x1A, 0x88, 0xA7, 0x02, 0x7F};


#endif
    LOG_WRITE(EN_LOG_NOTICE, "JTAG CPLD Reset start...\n");
    if (false == Upgrade(ucReload, sizeof(ucReload))) {
        LOG_WRITE(EN_LOG_ERROR, "JTAG CPLD Reset Fail!\n");
        return false;
    }

    return true;
}


bool
CJtag::WritePin(uint8_t ucPin, uint8_t ucValue)
{
    uint8_t ucBit = 0;

    if ((ucPin != JTAG_PIN_TDI) &&
        (ucPin != JTAG_PIN_TCK) &&
        (ucPin != JTAG_PIN_TMS)) {
        LOG_WRITE(EN_LOG_ERROR, "gpio pin error");
        return false;
    }

    switch (ucPin) {
    case JTAG_PIN_TCK:
        ucBit = JTAG_PIN_TDI_BIT;
        break;

    case JTAG_PIN_TMS:
        ucBit = JTAG_PIN_TCK_BIT;
        break;

    case JTAG_PIN_TDI:
        ucBit = JTAG_PIN_TMS_BIT;
        break;
    }

    /* LOG_WRITE(EN_LOG_NOTICE, "ucBit = %d, ucValue = %d", ucPin, ucValue); */
    m_stpLogicDrv->WriteBit(UPGRADE_REG + m_uiBaseAddr, ucBit, ucValue);
    /* usleep(10); */
    /* LOG_WRITE(EN_LOG_NOTICE, "jtag upgrade addr:0x%x,m_uiBaseAddr:0x%x",UPGRADE_REG + m_uiBaseAddr,m_uiBaseAddr); */
    return true;
}


bool
CJtag::ReadTDO(uint8_t &ucValue)
{

    m_stpLogicDrv->ReadBit(UPGRADE_REG + m_uiBaseAddr, JTAG_PIN_TDO_BIT, ucValue);
    /* LOG_WRITE(EN_LOG_NOTICE, "jtag upgrade addr:0x%x,m_uiBaseAddr:0x%x",UPGRADE_REG + m_uiBaseAddr,m_uiBaseAddr); */
    /* usleep(10); */
    return true;
}

bool
CJtag::GetImg(uint8_t *pucData)
{
    if (NULL == pucData) {
        LOG_WRITE(EN_LOG_ERROR, "input null");
        goto ERR_LABEL;
    }

    /* LOG_WRITE(EN_LOG_NOTICE, "ms_uiImgPos = %d, ms_uiImgLen = %d.", ms_uiImgPos, ms_uiImgLen); */
    if (ms_uiImgPos >= ms_uiImgLen) {
        LOG_WRITE(EN_LOG_ERROR, "data length error");
        goto ERR_LABEL;
    }

    *pucData = *(ms_pucImg + ms_uiImgPos);
    ms_uiImgPos++;

    return true;

ERR_LABEL:
    LOG_WRITE(EN_LOG_NOTICE, "GetImg error.");
    return false;
}




