swagger: '2.0'
info:
  description: 'This is the first go at creating a swagger API for the Adva OMT device [http://swagger.io](http://swagger.io)'
  version: 0.0.1
  title: Swagger OMT
  termsOfService: 'http://swagger.io/terms/'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: omg.swagger.io
basePath: /
securityDefinitions:
  TOKEN:
    type: apiKey
    name: TOKEN
    in: header
tags:
  - name: OMT
    description: 'Base OMT device '
schemes:
  - https
paths:
  /omt/config:
    post:
      tags:
        - omt
      summary: push config to the device
      description: push full json object of config to device
      operationId: pushConfig
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: config object to be pushed to the device
          required: true
          schema:
            $ref: '#/definitions/FullConfig'
      responses:
        '200':
          description: successful operation
        '405':
          description: invalid input
    get:
      tags:
        - omt
      summary: get running config from the device
      description: get full json config of the device
      operationId: getConfig
      produces:
        - application/json
      responses:
        '200':
          description: succesful operation
          schema:
            $ref: '#/definitions/FullConfig'
  /omt/config/pre-amp/:
    post:
      tags:
        - omt
      summary: push pre-amp config to the device
      operationId: pushPreAmpConfig
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: config object to be pushed to the device
          required: true
          schema:
            $ref: '#/definitions/Pre-Amp'
      responses:
        '200':
          description: successful operation
        '405':
          description: invalid input
    put:
      tags:
        - omt
      summary: update one or more properties of pre-amp to the device
      operationId: updatePreAmpConfig
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: one or more properties of pre-amp to be updated to the device
          required: false
          schema:
            $ref: '#/definitions/Pre-Amp'
      responses:
        '200':
          description: successful operation
        '405':
          description: invalid input

  /omt/config/booster-amp/:
    post:
      tags:
        - omt
      summary: push booster-amp config to the device
      operationId: pushBoosterAmpConfig
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: config object to be pushed to the device
          required: true
          schema:
            $ref: '#/definitions/Booster-Amp'
      responses:
        '200':
          description: successful operation
        '405':
          description: invalid input
    put:
      tags:
        - omt
      summary: update one or more properties of booster-amp to the device
      operationId: updateBoosterAmpConfig
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: one or more properties of booster-amp to be updateed to the device
          required: false
          schema:
            $ref: '#/definitions/Booster-Amp'
      responses:
        '200':
          description: successful operation
        '405':
          description: invalid input

  /omt/config/system/:
    post:
      tags:
        - omt
      summary: push system config to the device
      operationId: pushSystemConfig
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: config object to be pushed to the device
          required: true
          schema:
            $ref: '#/definitions/System'
      responses:
        '200':
          description: successful operation
        '405':
          description: invalid input
    put:
      tags:
        - omt
      summary: update one or more properties of system to the device
      operationId: updateSystemConfig
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: update one or more properties of system to be updated to the device
          required: false
          schema:
            $ref: '#/definitions/System'
      responses:
        '200':
          description: successful operation
        '405':
          description: invalid input
  /omt/inventory:
    get:
      tags:
        - omt
      summary: get device inventory
      description: retrieves inventory information
      operationId: getInventory
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Inventory'
        '405':
          description: invalid input
  /omt/current-pm-values:
    get:
      tags:
        - omt
      summary: get device pm values
      description: retrieves pm values
      operationId: getPMs
      produces:
        - application/json
      responses:
        '200':
          description: succesful operation
          schema:
            $ref: '#/definitions/CurrentPmValues'
        '405':
          description: invalid request
  /omt/past-pm-values:
    get:
      tags:
        - omt
      summary: get pm values since last retrieval
      description: retrieves pm values
      operationId: getPms
      produces:
        - application/json
      responses:
        '200':
          description: succesful operation
          schema:
            $ref: '#/definitions/PmFormat'
        '405':
          description: invalid request
  /omt/current-alarms:
    get:
      tags:
        - omt
      summary: get device alarms
      description: retrieves alarms
      operationId: getAlarms
      produces:
        - application/json
      responses:
        '200':
          description: succesful operation
          schema:
            $ref: '#/definitions/Alarms'
        '405':
          description: invalid request
  /omt/operations/coldrestart:
    post:
      tags:
        - omt
      summary: cold restart the entity
      description: initiate coldrestart
      operationId: coldRestart
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: restart state
          required: true
          schema:
            $ref: '#/definitions/Restart'
      responses:
        '200':
          description: successful operation
        '405':
          description: invalid Input
  /omt/operations/warmrestart:
    post:
      tags:
        - omt
      summary: warm restart the entity
      description: initiate warmrestart
      operationId: warmRestart
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: restart state
          required: true
          schema:
            $ref: '#/definitions/Restart'
      responses:
        '200':
          description: successful operation
        '405':
          description: invalid Input
  /omt/user:
    post:
      tags:
        - omt
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Created login user
          required: true
          schema:
            $ref: '#/definitions/Users'
      responses:
        '200':
          description: successful operation
        '400':
          description: failed to add user
    get:
      tags:
        - omt
      summary: get provisioned users on device
      description: this will return provisioned users on device
      operationId: getUsers
      produces:
        - application/json
      responses:
        '200':
          description: succesful operation
          schema:
            $ref: '#/definitions/Users'
        '405':
          description: invalid input
  /omt/user/login:
    get:
      tags:
        - omt
      summary: Logs user into the system
      description: logs user in
      operationId: loginUser
      produces:
        - application/json
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      security: 
        - TOKEN: []
      responses:
        '200':
          description: successful operation
          headers:
            TOKEN:
              description: token authentication
              type: string
        '400':
          description: Invalid username/password supplied
  /omt/user/logout:
    parameters:
      - name: TOKEN
        in: header
        description: token to be passed as a header. return TOKEN after login successful
        required: true
        type: string
    get:
      tags:
        - omt
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      produces:
        - application/xml
      responses:
        default:
          description: successful operation
  '/omt/user/{username}':
    delete:
      tags:
        - omt
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /omt/software/upgrade:
    post:
      tags:
        - omt 
      summary: push and upgrade software
      description: download software and upgrade it
      operationId: Upgrade
      produces: 
        - application/json
      parameters:
        - in: body
          name: body
          description: downloading and loading sw
          required: true
          schema:
            $ref: '#/definitions/SoftwareLoad'
      responses:
        '405':
          description: invalid data 
        '200':
          description: successful operation
    get:
      tags:
        - omt
      summary: get software upgrade state from the device
      description: ''
      operationId: getUpgradeState
      produces:
        - application/json
      responses:
        '200':
           description: successful operation
           schema:
              $ref: '#/definitions/UpgradeState'
        '405':
           description: invalid input
  /omt/software/download:
    post:
      tags:
      - omt 
      summary: push bundle file to AMP
      description: download bundle file
      operationId: Download
      produces: 
        - application/json
      parameters:
        - in: body
          name: body
          description: downloading bundle file, query download process or status by "get /omt/software/upgrade"
          required: true
          schema:
            $ref: '#/definitions/SoftwareLoad'
      responses:
        '405':
          description: invalid input
        '200':
          description: successful operation
  /omt/software/activate:
    post:
      tags:
      - omt 
      summary: upgrade software
      description: install software
      operationId: Activate
      produces: 
        - application/json
      parameters: []
      responses:
        '405':
          description: invalid input
        '200':
          description: successful operation
    get:
      tags:
        - omt
      summary: get software upgrade state from the device
      description: ''
      operationId: getUpgradeState2
      produces:
        - application/json
      responses:
        '200':
           description: successful operation
           schema:
              $ref: '#/definitions/UpgradeState'
        '405':
           description: invalid input
  /omt/operations/transfer-file:
    post:
      tags:
      - omt 
      summary: transfer file (logs, pm, alarm) to from AMP to external scp server
      operationId: transferFile
      produces: 
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/TransferFile'
      responses:
        '405':
          description: invalid input 
        '200':
          description: successful operation
  /omt/remote-node-info:
    get:
      tags:
        - omt
      summary: get remote device information
      description: retrieves remote node information
      operationId: getRemoteNode
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/RemoteNode'
        '405':
          description: invalid input
  /omt/operations/auto-gain:
    post:
      tags:
        - omt
      summary: Automatic control of gain and span loss.
      description: trigger automatic control of span loss (span equalization)
      operationId: autoSpanEq
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
        '201':
          description: operation in progress
        '406':
          description: failed operation

    get:
      tags:
        - omt
      summary: get the status and/or results of automatic control of span loss
      description: ''
      operationId: getAutoSpan
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Auto-Gain'
        '406':
          description: failed operation
  /omt/system/lamptest:
    post:
      tags:
        - omt
      summary: LED test on front panel.
      description: ''
      operationId: lampTest
      produces:
        - application/json
      parameters: []
      responses:
        default:
          description: successful operation
  /omt/config/threshold:
    post:
      tags:
        - omt
      summary: configurations threshold.
      operationId: threshold
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: ''
          required: true
          schema:
            $ref: '#/definitions/Threshold'
      responses:
        '200':
          description: successful operation
        '405':
          description: invalid input
    get:
      tags:
        - omt
      summary: get threshold
      description: ''
      operationId: getThreshold
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Threshold'
        '405':
          description: invalid input
  /omt/system/apsd:
    post:
      tags:
        - omt 
      summary: enable or disable apsd feature
      description: enable or disable apsd. After the device restarts, APSD will return to enabled by default.
      operationId: pushApsdConfig
      produces: 
        - application/json
      parameters:
        - in: body
          name: body
          description: enable or disable apsd
          required: true
          schema:
            $ref: '#/definitions/Apsd'
      responses:
        '405':
          description: invalid data 
        '200':
          description: successful operation
    get:
      tags:
        - omt
      summary: get apsd state
      description: get apsd config state and acutal state from the device
      operationId: getApsdState
      produces:
        - application/json
      responses:
        '200':
           description: successful operation
           schema:
              $ref: '#/definitions/ApsdState'
        '405':
           description: invalid input
  /omt/system/ipacl:
    post:
      tags:
        - omt
      summary: config ip acl rules
      description: config ip acl rules
      operationId: pushIpaclConfig
      produces: 
        - application/json
      parameters:
        - in: body
          name: body
          description: ip acl rules
          required: true
          schema:
            $ref: '#/definitions/Ipacl'
      responses:
        '405':
          description: invalid data 
        '200':
          description: successful operation
    get:
      tags:
        - omt
      summary: get ip acl rules
      description: get ipacl config 
      operationId: getIpaclConfig
      produces:
        - application/json
      responses:
        '200':
           description: successful operation
           schema:
              $ref: '#/definitions/Ipacl'
        '405':
           description: invalid input
  /data/optical-mux/config:
    post:
      tags:
        - omt
      summary: push mux config to the device
      description: push mux json object of config to device
      operationId: pushMuxConfig
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: config object to be pushed to the device
          required: true
          schema:
            $ref: '#/definitions/MuxConfig'
      responses:
        '200':
          description: successful operation
        '405':
          description: invalid input
    get:
      tags:
        - omt
      summary: get mux running config from the device
      description: get mux json config of the device
      operationId: getMuxConfig
      produces:
        - application/json
      responses:
        '200':
          description: succesful operation
          schema:
            $ref: '#/definitions/MuxConfig'
  /data/optical-mux/state:
    get:
      tags:
        - omt
      summary: get mux power state
      description: get mux power state
      operationId: getMuxState
      produces:
        - application/json
      responses:
        '200':
          description: succesful operation
          schema:
            $ref: '#/definitions/MuxState'
  /omt/system/clear-auto-alarms:
    post:
      tags:
        - omt
      summary: Clear auto control alarms.
      description: "Clear auto control alarms: auto-gain-failed, auto-ba-input-low"
      operationId: clearAutoAlarms
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
        '406':
          description: failed operation
  /data/ocm/osa={name}/raw-data:
    get:
      tags:
      - "osa raw data"
      summary: "List of osa raw data"
      description: "List of osa raw data, keyed by osa port name."
      parameters:
      - name: "name"
        in: "path"
        description: "osa monitor port name"
        required: true
        type: "string"
      responses:
        200:
          description: "osa raw data"
          schema:
            $ref: "#/definitions/OsaRawData"
        404:
          description: "Not find port name"

  /omt/auto-control/fiber-config/type={name}:
    get:
      tags:
      - "omt"
      summary: "get fiber config information"
      description: "get fiber config information"
      parameters:
      - name: "name"
        in: "path"
        description: "fiber name. The vaule is one of all/allwave/dsf/leaf/ls/metrocore/ssmf/teralight/truewave-cplus/truewave-reach/truewave-rs"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/FiberConfig"
        405:
          description: "invalid input"
        
definitions:
  FullConfig:
      type: object
      properties:
        system:
          $ref: '#/definitions/System'
        booster-amp:
          $ref: '#/definitions/Booster-Amp'
        pre-amp:
          $ref: '#/definitions/Pre-Amp'
  Restart:
    type: object
    properties:
      entity:
        type: string
        example: module
        enum:
          - module
          - scc
          - optical-card
  Users:
    type: object
    properties:
      'user#':
        type: object
        properties:
          username:
            type: string
            title: username
            example: admin
          password:
            type: string
            title: password
            example: 12345
          access:
            type: string
            title: access level
            example: 'full'
            enum:
              - full
              - readonly
  System:
    type: object
    properties:
      nodename:
        type: string
        title: The hostname
        description: set device hostname
        example: syd23-bwu11-omt
      ip-address:
        type: string
        title: The Ip-address .
        description: set node ip.
        example: 1.1.1.2
      netmask:
        type: string
        title: netmask
        description: set netmask
        example: 255.255.0.0
      gateway:
        type: string
        title: Gateway
        description: set gateway
        example: 1.1.1.1
      ntp-ip-1:
        type: string
        title: The Ntp
        description: set NTP server ip
        example: 1.1.1.3
      ntp-ip-2:
        type: string
        title: The Ntp
        description: set NTP server ip
        example: 1.1.1.30
      syslog-ip-1:
        type: string
        title: The Syslog ip.
        description: set syslog server ip
        example: 1.1.1.4
      syslog-ip-2:
        type: string
        title: The Syslog ip.
        description: set syslog server ip
        example: 1.1.1.40
      tacacs-ip-1:
        type: string
        title: The Tacacs ip
        description: set tacacs server
        example: 1.1.1.5
      tacacs-server-secret-1:
        type: string
        title: The TACACS+ server secret key
        description: set the secret key of tacacs server
        example: Key@123
      tacacs-ip-2:
        type: string
        title: The Tacacs ip
        description: set tacacs server
        example: 1.1.1.50
      tacacs-server-secret-2:
        type: string
        title: The TACACS+ server secret key
        description: set the secret key of tacacs server
        example: Key@234
      fiber-type:  
        type: string
        description: for calculation tcdc value. Refer to SFS Table 3-1.
        example: ssmf
        enum:
        - ssmf
        - allwave
        - teralight
        - truewave-reach
        - leaf
        - metrocore
        - truewave-rs
        - truewave-cplus
        - ls-fiber-type
        - dsf-fiber-type
      launching-power-per-channel:
        type: number
        description: per channel output power at LineOut port.
        example: 4.0
      drop-power-per-channel:
        type: number
        description: per channel drop power at Demux port.
        example: 1.0        
      number-of-carriers:
        type: integer
        description: to number of carriers in the system. In a 2-lambd 100G PAM4 system, it is 2 carriers per channel, so this property must be an even number.
        example: 8
      ocm-based-carriers:  
        type: string
        description: enable stands for using ocm based carriers, and disable stands for setting number-of-carriers.
        example: disable
        enum: 
          - enable
          - disable
      timezone:
        type: integer
        description: setting timezone.
        example: 8
      long-span:  
        type: string
        description: enable long-span(26dB < span < 29dB), and disable long-span.
        example: disable
        enum: 
          - enable
          - disable
      ipv6-mode:  
        type: string
        description: ipv6 creation mode
        example: link-layer
        enum: 
          - static
          - dhcp
          - link-layer
      ipv6-address:
        type: string
        title: The ipv6 address
        description: set node ipv6 with prefix length.
        example: 2001::1/64
      ipv6-gateway:
        type: string
        title: ipv6 gateway
        description: set ipv6 gateway
        example: 2001::8

  Booster-Amp:
    type: object
    properties:
      target-gain:
        type: number
        title: The Target-gain.
        description: gain setting in DB.
        example: 16.5
      target-gain-tilt:
        type: integer
        title: 'The Target-gain-tilt '
        description: setting tilt.
        example: 0
      voa:
        type: integer
        title: The Voa.
        description: setting attenuation.
        example: 0
      apr-enable:  
        type: string
        title: APR feature setting.
        description: to enable or disable APR feature.
        example: enable
        enum:
          - enable
          - disable 
      state:
        type: string
        title: The State of the amp.
        description: turn amp up or down
        example: up
        enum:
          - up 
          - down
  Pre-Amp:
    type: object
    properties:
      target-gain:
        type: integer
        title: The Target-gain.
        description: to set gain value.
        example: 13
      target-gain-tilt:
        type: integer
        title: The Target-gain-tilt value.
        description: to set tilt.
        example: 0
      voa:
        type: integer
        title: The Voa.
        description: setting attenuation.
        example: 0
      apr-enable:  
        type: string
        title: APR feature setting.
        description: to enable or disable APR feature.
        example: enable
        enum: 
          - enable
          - disable 
      state:
        type: string
        title: state of amp.
        description: to turn amp on and off.
        example: up
        enum:
          - up 
          - down
  Inventory:
    type: object
    properties:
      serial-number-module:
        type: string
        example: SR12456
      part-number-module:
        type: string
        example: PN1234
      software-version-module:
        type: string
        example: SV-1.2      
      vendor:
        type: string
        example: Molex
      serial-number-scc:
        type: string
        example: SR12456
      part-number-scc:
        type: string
        example: PN1234
      serial-number-optical:
        type: string
        example: SR12456
      part-number-optical:
        type: string
        example: PN1234
      serial-number-power-a:
        type: string
        example: SR12456
      part-number-power-a:
        type: string
        example: PN1234
      serial-number-power-b:
        type: string
        example: SR12456
      part-number-power-b:
        type: string
        example: PN1234
      serial-number-fan-a:
        type: string
        example: SR12456
      part-number-fan-a:
        type: string
        example: PN1234
      serial-number-fan-b:
        type: string
        example: SR12456
      part-number-fan-b:
        type: string
        example: PN1234
      serial-number-fan-c:
        type: string
        example: SR12456
      part-number-fan-c:
        type: string
        example: PN1234
      serial-number-fan-d:
        type: string
        example: SR12456
      part-number-fan-d:
        type: string
        example: PN1234
      serial-number-mux:
        type: string
        example: SR12456
      part-number-mux:
        type: string
        example: PN1234
  Alarms:
    type: object
    properties:
      UniqueAlarmEntity#:
        $ref: '#/definitions/AlarmName'
  AlarmName:
    type: object
    properties:
      alarm-severity:
        type: string
        description: alarm severity
        example: 'NSA'
        enum:
        - SA
        - NSA
      timestamp:
        type: string
        description: timestamp for when alarm raised
        example: '2020-06-20T17:01:44Z'
  CurrentPmValues:
    type: object
    properties:
      timestamp:
        type: string
        description: timestamp for when pm getted
        example: '2020-07-17T13:17:16Z'
      line-output-power:
        type: number
      line-input-power:
        type: number
      pre-amp-input-power:
        type: number
      pre-amp-output-power:
        type: number
      booster-amp-input-power:
        type: number
      booster-amp-output-power:
        type: number
      osc-output-power:
        type: number
      osc-input-power:
        type: number
      pre-amp-gain:
        type: number
      pre-amp-voa:
        type: number
      booster-amp-gain: 
        type: number
      booster-amp-voa:
        type: number
      booster-amp-return-loss: 
        type: number
      pre-amp-return-loss:
        type: number
  SoftwareLoad:
    type: object
    properties:
      user-id:
        type: string
        description: scp server login username
      password:
        type: string
        description: scp server login password
      source-file-name:
        type: string
        description: source file-name on scp server. <scp-server-ip>:<source-file-name>
        example: 172.16.166.232:/AMPBundle/FirmwareBundle_0.01.0001
  UpgradeState:
    type: object
    properties:
      state:
        type: string
        description: Display the step of upgrade.
        example: none
        enum:
          - none
          - commit
          - commit-fail
          - commit-succ
          - check-bundle
          - check-bundle-fail
          - check-bundle-succ
          - download
          - download-fail
          - download-succ
          - switch
          - switch-fail
          - switch-succ
      status:
        type: string
        description: Display the status of upgrade.
        example: normal
        enum:
          - normal
          - upgrading
      progress:
        type: integer
        description: percentage of upgrade progress.
        example: 100 
      filesize:
        type: string
        description: Downloaded bundle file size. The value is valid when state is "ready to activate".
        example: 1022334 bytes
      hitless:
        type: string
        description: yes:hitless or no:non-hitless. The value is valid when state is "ready to activate".
        example: yes
        enum:
          - yes
          - no
  PmFormat:
    type: object
    properties: 
      UniqueTimestamp#:
        type: object
        properties:
          line-output-power:
            type: number
          line-input-power:
            type: number
          pre-amp-input-power:
            type: number
          pre-amp-output-power:
            type: number
          booster-amp-input-power:
            type: number
          booster-amp-output-power:
            type: number
          osc-output-power:
            type: number
          osc-input-power:
            type: number
          pre-amp-gain:
            type: number
          pre-amp-voa:
            type: number
          booster-amp-gain: 
            type: number
          booster-amp-voa:
            type: number 
  TransferFile:
    type: object
    properties:
      user-id:
        type: string
        description: scp server login username
      password:
        type: string
        description: scp server login password
      source-file-name:
        type: string
        description: local source file-name on AMP.
        example: /var/log/syslog_notification.csv
      destination-file-name:
        type: string
        description: destination file-name on scp server. <scp-server-ip>:<destination-file-name>
        example: 172.16.166.232:/tmp/syslog_notification.csv
  RemoteNode:
    type: object
    properties:
      nodename:
        type: string
        title: The remote node name
        description: remote node name
        example: syd23-bwu11-omt
      ip-address:
        type: string
        title: The remote ip address
        description: remote ip address
        example: 10.0.1.200
  Auto-Gain:
    type: object
    properties: 
      span-loss:
        type: number
        description: measured span loss between local AMP and downstream AMP
        example: 10.5      
      pre-amp-gain: 
        type: number
        description: actual gain set on downstream pre-amplifier
        example: 10.5
      booster-amp-gain: 
        type: number
        description: actual gain set on local booster-amplifier
        example: 10.5
      booster-voa-attenuation: 
        type: number
        description: attenuation applied on local booster VOA
        example: 10.5
      progress:
        type: integer
        description: percentage of automatic control progress. As this operation is usually finished very quickly, the response to this API is usually 100%.
        example: 10
      state:
        type: string
        description: "Display the state of automatic control.
          success - success; 
          processing - in progress; 
          failed-in-spanloss - failed state, Span loss greater than 22dB. Accuracy +- 1dB;
          failed-in-ba-input-power - failed state, BA input single channel power less then -19dBm. Accuracy +- 0.5dB;
          failed-in-gain - Other error, please try again;
          failed-in-osc - failed state, Osc communication failed."
        enum:
          - success
          - processing
          - failed-in-spanloss
          - failed-in-ba-input-power
          - failed-in-gain
          - failed-in-osc
  Threshold:
    type: object
    properties:
      span-loss-threshold:
        type: number
        description: span loss threshold.
        example: 1.5
  Apsd:
    type: object
    properties:
      apsd-enable:  
        type: string
        title: APSD feature setting.
        description: to enable or disable APSD feature.
        example: enable
        enum:
          - enable
          - disable 
  ApsdState:
    type: object
    properties:
      apsd-enable:  
        type: string
        title: APSD state.
        description: APSD config state.
        example: enable
        enum:
          - enable
          - disable
      apsd-status:  
        type: string
        title: APSD actual status.
        description: APSD actual status.
        example: enable
        enum:
          - enable
          - disable  
  Ipacl:
    type: object
    properties:
      rules:  
        type: array
        description: "List of ipv4 acl rules."
        items:
          $ref: "#/definitions/IpaclRules"
      rules-ipv6:  
        type: array
        description: "List of ipv6 acl rules."
        items:
          $ref: "#/definitions/IpaclRulesV6"
  IpaclRules:
    type: object
    properties:
      source-ip:  
        type: string
        description: source ip.
        example: 172.16.166.6/24
      target:  
        type: string
        description: how to handle the packet.
        example: ACCEPT
        enum:
          - ACCEPT
          - DROP
          - REJECT
  IpaclRulesV6:
    type: object
    properties:
      source-ip:  
        type: string
        description: source ip.
        example: 2001:11:22::1/64
      target:  
        type: string
        description: how to handle the packet.
        example: ACCEPT
        enum:
          - ACCEPT
          - DROP
          - REJECT
  MuxConfig:
      type: object
      properties:
        reflection:
          $ref: '#/definitions/MuxReflectionConfig'
        connectivity:
          $ref: '#/definitions/MuxConnectivityConfig'
  MuxReflectionConfig:
    type: object
    properties:
      muxt-differ-high-thr:
        type: number
        title: The muxt-differ-high-thr value.
        description: "to set MuxT differ high threshold, range:[0,36]"
        example: 13
      muxt-differ-low-thr:
        type: number
        title: The muxt-differ-low-thr value.
        description: "to set MuxT differ low threshold, range:[0,36]"
        example: 12
  MuxConnectivityConfig:
    type: object
    properties:
      muxr-differ-high-thr:
        type: number
        title: The muxt-differ-high-thr value.
        description: "to set MuxR differ high threshold, range:[0,10]"
        example: 3
      muxr-differ-low-thr:
        type: number
        title: The muxt-differ-low-thr value.
        description: "to set MuxR differ low threshold, range:[0,10]"
        example: 2
      demuxt-differ-high-thr:
        type: number
        title: The muxt-differ-high-thr value.
        description: "to set DemuxT differ high threshold, range:[0,10]"
        example: 3
      demuxt-differ-low-thr:
        type: number
        title: The muxt-differ-low-thr value.
        description: "to set DemuxT differ low threshold, range:[0,10]"
        example: 2
  MuxState:
      type: object
      properties:
        reflection:
          $ref: '#/definitions/MuxReflectionState'
        connectivity:
          $ref: '#/definitions/MuxConnectivityState'
  MuxReflectionState:
    type: object
    properties:
      muxt-output-power:
        type: number
        description: "The MuxT output power"
      muxt-reflect-power:
        type: number
        description: "The MuxT reflection power"
      muxt-differ-power:
        type: number
        description: "The MuxT differ power"
  MuxConnectivityState:
    type: object
    properties:
      muxr-output-power:
        type: number
        description: "The MuxR output power"
      muxr-input-power:
        type: number
        description: "The MuxR input power"
      muxr-differ-power:
        type: number
        description: "The MuxR differ power"
      demuxt-output-power:
        type: number
        description: "The DemuxT output power"
      demuxt-input-power:
        type: number
        description: "The DemuxT input power"
      demuxt-differ-power:
        type: number
        description: "The DemuxT differ power"
  OsaRawData:
    type: object
    properties:
      port:
        type: string
        description: "osa monitor port name"
      power:
        type: array
        description: "Ocm raw data by 12.5GHz step and 12.5GHz resolution. Start frequency is 196137.500000GHz, and end frequency is 191262.500000GHz"
        items:
            type: number
  FiberConfig:
    type: object
    properties:
      'name#':
         type: object
         properties:
           dispersion:
             type: number
             description: "Unit: ps/nm/km"
           fiber_loss:
             type: number
             description: "Unit: dB/km"
           launching_power:
             type: number
             description: "Unit: dBm/carrier"
           supported_span_loss:
             type: number
             description: "Unit: dB"
           signal_loss_tilt:
             type: number
             description: "Unit: dB/km"
           osc_loss_tilt:
             type: number
             description: "Unit: dB/km"
           srs_k:
             type: number
             description: ""     

externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
