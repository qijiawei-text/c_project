/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* source: gnmi_ext.proto */

#ifndef GOOGLE_PROTOBUF_INCLUDED_gnmi_5fext_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gnmi_5fext_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  /* IWYU pragma: export */
#include <google/protobuf/extension_set.h>  /* IWYU pragma: export */
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
/* @@protoc_insertion_point(includes) */
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gnmi_5fext_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  /* namespace internal */
PROTOBUF_NAMESPACE_CLOSE

/* Internal implementation detail -- do not use these members. */
struct TableStruct_gnmi_5fext_2eproto {
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
    static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
    static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gnmi_5fext_2eproto;
namespace gnmi_ext {
class Extension;
class ExtensionDefaultTypeInternal;
extern ExtensionDefaultTypeInternal _Extension_default_instance_;
class MasterArbitration;
class MasterArbitrationDefaultTypeInternal;
extern MasterArbitrationDefaultTypeInternal _MasterArbitration_default_instance_;
class RegisteredExtension;
class RegisteredExtensionDefaultTypeInternal;
extern RegisteredExtensionDefaultTypeInternal _RegisteredExtension_default_instance_;
class Role;
class RoleDefaultTypeInternal;
extern RoleDefaultTypeInternal _Role_default_instance_;
class Uint128;
class Uint128DefaultTypeInternal;
extern Uint128DefaultTypeInternal _Uint128_default_instance_;
}  /* namespace gnmi_ext */
PROTOBUF_NAMESPACE_OPEN
template<> ::gnmi_ext::Extension * Arena::CreateMaybeMessage<::gnmi_ext::Extension>(Arena *);
template<> ::gnmi_ext::MasterArbitration * Arena::CreateMaybeMessage<::gnmi_ext::MasterArbitration>(Arena *);
template<> ::gnmi_ext::RegisteredExtension * Arena::CreateMaybeMessage<::gnmi_ext::RegisteredExtension>(Arena *);
template<> ::gnmi_ext::Role * Arena::CreateMaybeMessage<::gnmi_ext::Role>(Arena *);
template<> ::gnmi_ext::Uint128 * Arena::CreateMaybeMessage<::gnmi_ext::Uint128>(Arena *);
PROTOBUF_NAMESPACE_CLOSE
namespace gnmi_ext {

enum ExtensionID : int {
    EID_UNSET = 0,
    EID_EXPERIMENTAL = 999,
    ExtensionID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
    ExtensionID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ExtensionID_IsValid(int value);
constexpr ExtensionID ExtensionID_MIN = EID_UNSET;
constexpr ExtensionID ExtensionID_MAX = EID_EXPERIMENTAL;
constexpr int ExtensionID_ARRAYSIZE = ExtensionID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *ExtensionID_descriptor();
template<typename T>
inline const std::string&
ExtensionID_Name(T enum_t_value)
{
    static_assert(::std::is_same<T, ExtensionID>::value ||
                  ::std::is_integral<T>::value,
                  "Incorrect type passed to function ExtensionID_Name.");
    return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
               ExtensionID_descriptor(), enum_t_value);
}
inline bool
ExtensionID_Parse(
    const std::string& name, ExtensionID *value)
{
    return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ExtensionID>(
               ExtensionID_descriptor(), name, value);
}
/* =================================================================== */

class Extension PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gnmi_ext.Extension) */ {
public:
    inline Extension() : Extension(nullptr) {
    };
    virtual ~Extension();

    Extension(const Extension &from);
    Extension(Extension && from) noexcept
    : Extension() {
        *this = ::std::move(from);
    }

    inline Extension&
    operator=(const Extension& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline Extension&
    operator=(Extension && from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
        return GetMetadataStatic().reflection;
    }
    static const Extension& default_instance();

    enum ExtCase {
        kRegisteredExt = 1,
        kMasterArbitration = 2,
        EXT_NOT_SET = 0,
    };

    static void InitAsDefaultInstance(); /* FOR INTERNAL USE ONLY */
    static inline const Extension *
    internal_default_instance()
    {
        return reinterpret_cast<const Extension *>(
                   &_Extension_default_instance_);
    }
    static constexpr int kIndexInFileMessages =
        0;

    friend void
    swap(Extension& a, Extension& b)
    {
        a.Swap(&b);
    }
    inline void
    Swap(Extension *other)
    {
        if (other == this) return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void
    UnsafeArenaSwap(Extension *other)
    {
        if (other == this) return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    /* implements Message ---------------------------------------------- */

    inline Extension *
    New() const final
    {
        return CreateMaybeMessage<Extension>(nullptr);
    }

    Extension *
    New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final
    {
        return CreateMaybeMessage<Extension>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const Extension& from);
    void MergeFrom(const Extension& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 * target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const final;
    int
    GetCachedSize() const final
    {
        return _cached_size_.Get();
    }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Extension *other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece
    FullMessageName()
    {
        return "gnmi_ext.Extension";
    }
protected:
    explicit Extension(::PROTOBUF_NAMESPACE_ID::Arena *arena);
private:
    static void ArenaDtor(void *object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);
public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata
    GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gnmi_5fext_2eproto);
        return ::descriptor_table_gnmi_5fext_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:

    /* nested types ---------------------------------------------------- */

    /* accessors ------------------------------------------------------- */

    enum : int {
        kRegisteredExtFieldNumber = 1,
        kMasterArbitrationFieldNumber = 2,
    };
    /* .gnmi_ext.RegisteredExtension registered_ext = 1; */
    bool has_registered_ext() const;
private:
    bool _internal_has_registered_ext() const;
public:
    void clear_registered_ext();
    const ::gnmi_ext::RegisteredExtension& registered_ext() const;
    ::gnmi_ext::RegisteredExtension *release_registered_ext();
    ::gnmi_ext::RegisteredExtension *mutable_registered_ext();
    void set_allocated_registered_ext(::gnmi_ext::RegisteredExtension *registered_ext);
private:
    const ::gnmi_ext::RegisteredExtension& _internal_registered_ext() const;
    ::gnmi_ext::RegisteredExtension *_internal_mutable_registered_ext();
public:
    void unsafe_arena_set_allocated_registered_ext(
        ::gnmi_ext::RegisteredExtension *registered_ext);
    ::gnmi_ext::RegisteredExtension *unsafe_arena_release_registered_ext();

    /* .gnmi_ext.MasterArbitration master_arbitration = 2; */
    bool has_master_arbitration() const;
private:
    bool _internal_has_master_arbitration() const;
public:
    void clear_master_arbitration();
    const ::gnmi_ext::MasterArbitration& master_arbitration() const;
    ::gnmi_ext::MasterArbitration *release_master_arbitration();
    ::gnmi_ext::MasterArbitration *mutable_master_arbitration();
    void set_allocated_master_arbitration(::gnmi_ext::MasterArbitration *master_arbitration);
private:
    const ::gnmi_ext::MasterArbitration& _internal_master_arbitration() const;
    ::gnmi_ext::MasterArbitration *_internal_mutable_master_arbitration();
public:
    void unsafe_arena_set_allocated_master_arbitration(
        ::gnmi_ext::MasterArbitration *master_arbitration);
    ::gnmi_ext::MasterArbitration *unsafe_arena_release_master_arbitration();

    void clear_ext();
    ExtCase ext_case() const;
    /* @@protoc_insertion_point(class_scope:gnmi_ext.Extension) */
private:
    class _Internal;
    void set_has_registered_ext();
    void set_has_master_arbitration();

    inline bool has_ext() const;
    inline void clear_has_ext();

    template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    union ExtUnion {
        ExtUnion() {
        }
        ::gnmi_ext::RegisteredExtension *registered_ext_;
        ::gnmi_ext::MasterArbitration *master_arbitration_;
    } ext_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

    friend struct ::TableStruct_gnmi_5fext_2eproto;
};
/* ------------------------------------------------------------------- */

class RegisteredExtension PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gnmi_ext.RegisteredExtension) */ {
public:
    inline RegisteredExtension() : RegisteredExtension(nullptr) {
    };
    virtual ~RegisteredExtension();

    RegisteredExtension(const RegisteredExtension &from);
    RegisteredExtension(RegisteredExtension && from) noexcept
    : RegisteredExtension() {
        *this = ::std::move(from);
    }

    inline RegisteredExtension&
    operator=(const RegisteredExtension& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline RegisteredExtension&
    operator=(RegisteredExtension && from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
        return GetMetadataStatic().reflection;
    }
    static const RegisteredExtension& default_instance();

    static void InitAsDefaultInstance(); /* FOR INTERNAL USE ONLY */
    static inline const RegisteredExtension *
    internal_default_instance()
    {
        return reinterpret_cast<const RegisteredExtension *>(
                   &_RegisteredExtension_default_instance_);
    }
    static constexpr int kIndexInFileMessages =
        1;

    friend void
    swap(RegisteredExtension& a, RegisteredExtension& b)
    {
        a.Swap(&b);
    }
    inline void
    Swap(RegisteredExtension *other)
    {
        if (other == this) return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void
    UnsafeArenaSwap(RegisteredExtension *other)
    {
        if (other == this) return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    /* implements Message ---------------------------------------------- */

    inline RegisteredExtension *
    New() const final
    {
        return CreateMaybeMessage<RegisteredExtension>(nullptr);
    }

    RegisteredExtension *
    New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final
    {
        return CreateMaybeMessage<RegisteredExtension>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const RegisteredExtension& from);
    void MergeFrom(const RegisteredExtension& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 * target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const final;
    int
    GetCachedSize() const final
    {
        return _cached_size_.Get();
    }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(RegisteredExtension *other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece
    FullMessageName()
    {
        return "gnmi_ext.RegisteredExtension";
    }
protected:
    explicit RegisteredExtension(::PROTOBUF_NAMESPACE_ID::Arena *arena);
private:
    static void ArenaDtor(void *object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);
public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata
    GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gnmi_5fext_2eproto);
        return ::descriptor_table_gnmi_5fext_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:

    /* nested types ---------------------------------------------------- */

    /* accessors ------------------------------------------------------- */

    enum : int {
        kMsgFieldNumber = 2,
        kIdFieldNumber = 1,
    };
    /* bytes msg = 2; */
    void clear_msg();
    const std::string& msg() const;
    void set_msg(const std::string& value);
    void set_msg(std::string && value);
    void set_msg(const char *value);
    void set_msg(const void *value, size_t size);
    std::string *mutable_msg();
    std::string *release_msg();
    void set_allocated_msg(std::string *msg);
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string * unsafe_arena_release_msg();
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_msg(
        std::string *msg);
private:
    const std::string& _internal_msg() const;
    void _internal_set_msg(const std::string& value);
    std::string *_internal_mutable_msg();
public:

    /* .gnmi_ext.ExtensionID id = 1; */
    void clear_id();
    ::gnmi_ext::ExtensionID id() const;
    void set_id(::gnmi_ext::ExtensionID value);
private:
    ::gnmi_ext::ExtensionID _internal_id() const;
    void _internal_set_id(::gnmi_ext::ExtensionID value);
public:

    /* @@protoc_insertion_point(class_scope:gnmi_ext.RegisteredExtension) */
private:
    class _Internal;

    template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    int id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_gnmi_5fext_2eproto;
};
/* ------------------------------------------------------------------- */

class MasterArbitration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gnmi_ext.MasterArbitration) */ {
public:
    inline MasterArbitration() : MasterArbitration(nullptr) {
    };
    virtual ~MasterArbitration();

    MasterArbitration(const MasterArbitration &from);
    MasterArbitration(MasterArbitration && from) noexcept
    : MasterArbitration() {
        *this = ::std::move(from);
    }

    inline MasterArbitration&
    operator=(const MasterArbitration& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline MasterArbitration&
    operator=(MasterArbitration && from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
        return GetMetadataStatic().reflection;
    }
    static const MasterArbitration& default_instance();

    static void InitAsDefaultInstance(); /* FOR INTERNAL USE ONLY */
    static inline const MasterArbitration *
    internal_default_instance()
    {
        return reinterpret_cast<const MasterArbitration *>(
                   &_MasterArbitration_default_instance_);
    }
    static constexpr int kIndexInFileMessages =
        2;

    friend void
    swap(MasterArbitration& a, MasterArbitration& b)
    {
        a.Swap(&b);
    }
    inline void
    Swap(MasterArbitration *other)
    {
        if (other == this) return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void
    UnsafeArenaSwap(MasterArbitration *other)
    {
        if (other == this) return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    /* implements Message ---------------------------------------------- */

    inline MasterArbitration *
    New() const final
    {
        return CreateMaybeMessage<MasterArbitration>(nullptr);
    }

    MasterArbitration *
    New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final
    {
        return CreateMaybeMessage<MasterArbitration>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const MasterArbitration& from);
    void MergeFrom(const MasterArbitration& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 * target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const final;
    int
    GetCachedSize() const final
    {
        return _cached_size_.Get();
    }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(MasterArbitration *other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece
    FullMessageName()
    {
        return "gnmi_ext.MasterArbitration";
    }
protected:
    explicit MasterArbitration(::PROTOBUF_NAMESPACE_ID::Arena *arena);
private:
    static void ArenaDtor(void *object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);
public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata
    GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gnmi_5fext_2eproto);
        return ::descriptor_table_gnmi_5fext_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:

    /* nested types ---------------------------------------------------- */

    /* accessors ------------------------------------------------------- */

    enum : int {
        kRoleFieldNumber = 1,
        kElectionIdFieldNumber = 2,
    };
    /* .gnmi_ext.Role role = 1; */
    bool has_role() const;
private:
    bool _internal_has_role() const;
public:
    void clear_role();
    const ::gnmi_ext::Role& role() const;
    ::gnmi_ext::Role *release_role();
    ::gnmi_ext::Role *mutable_role();
    void set_allocated_role(::gnmi_ext::Role *role);
private:
    const ::gnmi_ext::Role& _internal_role() const;
    ::gnmi_ext::Role *_internal_mutable_role();
public:
    void unsafe_arena_set_allocated_role(
        ::gnmi_ext::Role *role);
    ::gnmi_ext::Role *unsafe_arena_release_role();

    /* .gnmi_ext.Uint128 election_id = 2; */
    bool has_election_id() const;
private:
    bool _internal_has_election_id() const;
public:
    void clear_election_id();
    const ::gnmi_ext::Uint128& election_id() const;
    ::gnmi_ext::Uint128 *release_election_id();
    ::gnmi_ext::Uint128 *mutable_election_id();
    void set_allocated_election_id(::gnmi_ext::Uint128 *election_id);
private:
    const ::gnmi_ext::Uint128& _internal_election_id() const;
    ::gnmi_ext::Uint128 *_internal_mutable_election_id();
public:
    void unsafe_arena_set_allocated_election_id(
        ::gnmi_ext::Uint128 *election_id);
    ::gnmi_ext::Uint128 *unsafe_arena_release_election_id();

    /* @@protoc_insertion_point(class_scope:gnmi_ext.MasterArbitration) */
private:
    class _Internal;

    template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::gnmi_ext::Role *role_;
    ::gnmi_ext::Uint128 *election_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_gnmi_5fext_2eproto;
};
/* ------------------------------------------------------------------- */

class Uint128 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gnmi_ext.Uint128) */ {
public:
    inline Uint128() : Uint128(nullptr) {
    };
    virtual ~Uint128();

    Uint128(const Uint128 &from);
    Uint128(Uint128 && from) noexcept
    : Uint128() {
        *this = ::std::move(from);
    }

    inline Uint128&
    operator=(const Uint128& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline Uint128&
    operator=(Uint128 && from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
        return GetMetadataStatic().reflection;
    }
    static const Uint128& default_instance();

    static void InitAsDefaultInstance(); /* FOR INTERNAL USE ONLY */
    static inline const Uint128 *
    internal_default_instance()
    {
        return reinterpret_cast<const Uint128 *>(
                   &_Uint128_default_instance_);
    }
    static constexpr int kIndexInFileMessages =
        3;

    friend void
    swap(Uint128& a, Uint128& b)
    {
        a.Swap(&b);
    }
    inline void
    Swap(Uint128 *other)
    {
        if (other == this) return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void
    UnsafeArenaSwap(Uint128 *other)
    {
        if (other == this) return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    /* implements Message ---------------------------------------------- */

    inline Uint128 *
    New() const final
    {
        return CreateMaybeMessage<Uint128>(nullptr);
    }

    Uint128 *
    New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final
    {
        return CreateMaybeMessage<Uint128>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const Uint128& from);
    void MergeFrom(const Uint128& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 * target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const final;
    int
    GetCachedSize() const final
    {
        return _cached_size_.Get();
    }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Uint128 *other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece
    FullMessageName()
    {
        return "gnmi_ext.Uint128";
    }
protected:
    explicit Uint128(::PROTOBUF_NAMESPACE_ID::Arena *arena);
private:
    static void ArenaDtor(void *object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);
public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata
    GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gnmi_5fext_2eproto);
        return ::descriptor_table_gnmi_5fext_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:

    /* nested types ---------------------------------------------------- */

    /* accessors ------------------------------------------------------- */

    enum : int {
        kHighFieldNumber = 1,
        kLowFieldNumber = 2,
    };
    /* uint64 high = 1; */
    void clear_high();
    ::PROTOBUF_NAMESPACE_ID::uint64 high() const;
    void set_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
private:
    ::PROTOBUF_NAMESPACE_ID::uint64 _internal_high() const;
    void _internal_set_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
public:

    /* uint64 low = 2; */
    void clear_low();
    ::PROTOBUF_NAMESPACE_ID::uint64 low() const;
    void set_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
private:
    ::PROTOBUF_NAMESPACE_ID::uint64 _internal_low() const;
    void _internal_set_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
public:

    /* @@protoc_insertion_point(class_scope:gnmi_ext.Uint128) */
private:
    class _Internal;

    template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::uint64 high_;
    ::PROTOBUF_NAMESPACE_ID::uint64 low_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_gnmi_5fext_2eproto;
};
/* ------------------------------------------------------------------- */

class Role PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gnmi_ext.Role) */ {
public:
    inline Role() : Role(nullptr) {
    };
    virtual ~Role();

    Role(const Role &from);
    Role(Role && from) noexcept
    : Role() {
        *this = ::std::move(from);
    }

    inline Role&
    operator=(const Role& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline Role&
    operator=(Role && from) noexcept
    {
        if (GetArena() == from.GetArena()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
        return GetMetadataStatic().reflection;
    }
    static const Role& default_instance();

    static void InitAsDefaultInstance(); /* FOR INTERNAL USE ONLY */
    static inline const Role *
    internal_default_instance()
    {
        return reinterpret_cast<const Role *>(
                   &_Role_default_instance_);
    }
    static constexpr int kIndexInFileMessages =
        4;

    friend void
    swap(Role& a, Role& b)
    {
        a.Swap(&b);
    }
    inline void
    Swap(Role *other)
    {
        if (other == this) return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void
    UnsafeArenaSwap(Role *other)
    {
        if (other == this) return;
        GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    /* implements Message ---------------------------------------------- */

    inline Role *
    New() const final
    {
        return CreateMaybeMessage<Role>(nullptr);
    }

    Role *
    New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final
    {
        return CreateMaybeMessage<Role>(arena);
    }
    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
    void CopyFrom(const Role& from);
    void MergeFrom(const Role& from);
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 * target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream * stream) const final;
    int
    GetCachedSize() const final
    {
        return _cached_size_.Get();
    }

private:
    inline void SharedCtor();
    inline void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Role *other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece
    FullMessageName()
    {
        return "gnmi_ext.Role";
    }
protected:
    explicit Role(::PROTOBUF_NAMESPACE_ID::Arena *arena);
private:
    static void ArenaDtor(void *object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);
public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata
    GetMetadataStatic()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gnmi_5fext_2eproto);
        return ::descriptor_table_gnmi_5fext_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:

    /* nested types ---------------------------------------------------- */

    /* accessors ------------------------------------------------------- */

    enum : int {
        kIdFieldNumber = 1,
    };
    /* string id = 1; */
    void clear_id();
    const std::string& id() const;
    void set_id(const std::string& value);
    void set_id(std::string && value);
    void set_id(const char *value);
    void set_id(const char *value, size_t size);
    std::string *mutable_id();
    std::string *release_id();
    void set_allocated_id(std::string *id);
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string * unsafe_arena_release_id();
    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_id(
        std::string *id);
private:
    const std::string& _internal_id() const;
    void _internal_set_id(const std::string& value);
    std::string *_internal_mutable_id();
public:

    /* @@protoc_insertion_point(class_scope:gnmi_ext.Role) */
private:
    class _Internal;

    template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_gnmi_5fext_2eproto;
};
/* =================================================================== */


/* =================================================================== */

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  /* __GNUC__ */
/* Extension */

/* .gnmi_ext.RegisteredExtension registered_ext = 1; */
inline bool
Extension::_internal_has_registered_ext() const
{
    return ext_case() == kRegisteredExt;
}
inline bool
Extension::has_registered_ext() const
{
    return _internal_has_registered_ext();
}
inline void
Extension::set_has_registered_ext()
{
    _oneof_case_[0] = kRegisteredExt;
}
inline void
Extension::clear_registered_ext()
{
    if (_internal_has_registered_ext()) {
        if (GetArena() == nullptr) {
            delete ext_.registered_ext_;
        }
        clear_has_ext();
    }
}
inline ::gnmi_ext::RegisteredExtension *Extension::release_registered_ext() {
    /* @@protoc_insertion_point(field_release:gnmi_ext.Extension.registered_ext) */
    if (_internal_has_registered_ext()) {
        clear_has_ext();
        ::gnmi_ext::RegisteredExtension *temp = ext_.registered_ext_;
        if (GetArena() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
        ext_.registered_ext_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::gnmi_ext::RegisteredExtension& Extension::_internal_registered_ext() const {
    return _internal_has_registered_ext()
           ? *ext_.registered_ext_
           : *reinterpret_cast< ::gnmi_ext::RegisteredExtension *>(&::gnmi_ext::_RegisteredExtension_default_instance_);
}
inline const ::gnmi_ext::RegisteredExtension& Extension::registered_ext() const {
    /* @@protoc_insertion_point(field_get:gnmi_ext.Extension.registered_ext) */
    return _internal_registered_ext();
}
inline ::gnmi_ext::RegisteredExtension *Extension::unsafe_arena_release_registered_ext() {
    /* @@protoc_insertion_point(field_unsafe_arena_release:gnmi_ext.Extension.registered_ext) */
    if (_internal_has_registered_ext()) {
        clear_has_ext();
        ::gnmi_ext::RegisteredExtension *temp = ext_.registered_ext_;
        ext_.registered_ext_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void
Extension::unsafe_arena_set_allocated_registered_ext(::gnmi_ext::RegisteredExtension *registered_ext)
{
    clear_ext();
    if (registered_ext) {
        set_has_registered_ext();
        ext_.registered_ext_ = registered_ext;
    }
    /* @@protoc_insertion_point(field_unsafe_arena_set_allocated:gnmi_ext.Extension.registered_ext) */
}
inline ::gnmi_ext::RegisteredExtension *Extension::_internal_mutable_registered_ext() {
    if (!_internal_has_registered_ext()) {
        clear_ext();
        set_has_registered_ext();
        ext_.registered_ext_ = CreateMaybeMessage< ::gnmi_ext::RegisteredExtension >(GetArena());
    }
    return ext_.registered_ext_;
}
inline ::gnmi_ext::RegisteredExtension *Extension::mutable_registered_ext() {
    /* @@protoc_insertion_point(field_mutable:gnmi_ext.Extension.registered_ext) */
    return _internal_mutable_registered_ext();
}

/* .gnmi_ext.MasterArbitration master_arbitration = 2; */
inline bool
Extension::_internal_has_master_arbitration() const
{
    return ext_case() == kMasterArbitration;
}
inline bool
Extension::has_master_arbitration() const
{
    return _internal_has_master_arbitration();
}
inline void
Extension::set_has_master_arbitration()
{
    _oneof_case_[0] = kMasterArbitration;
}
inline void
Extension::clear_master_arbitration()
{
    if (_internal_has_master_arbitration()) {
        if (GetArena() == nullptr) {
            delete ext_.master_arbitration_;
        }
        clear_has_ext();
    }
}
inline ::gnmi_ext::MasterArbitration *Extension::release_master_arbitration() {
    /* @@protoc_insertion_point(field_release:gnmi_ext.Extension.master_arbitration) */
    if (_internal_has_master_arbitration()) {
        clear_has_ext();
        ::gnmi_ext::MasterArbitration *temp = ext_.master_arbitration_;
        if (GetArena() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
        ext_.master_arbitration_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::gnmi_ext::MasterArbitration& Extension::_internal_master_arbitration() const {
    return _internal_has_master_arbitration()
           ? *ext_.master_arbitration_
           : *reinterpret_cast< ::gnmi_ext::MasterArbitration *>(&::gnmi_ext::_MasterArbitration_default_instance_);
}
inline const ::gnmi_ext::MasterArbitration& Extension::master_arbitration() const {
    /* @@protoc_insertion_point(field_get:gnmi_ext.Extension.master_arbitration) */
    return _internal_master_arbitration();
}
inline ::gnmi_ext::MasterArbitration *Extension::unsafe_arena_release_master_arbitration() {
    /* @@protoc_insertion_point(field_unsafe_arena_release:gnmi_ext.Extension.master_arbitration) */
    if (_internal_has_master_arbitration()) {
        clear_has_ext();
        ::gnmi_ext::MasterArbitration *temp = ext_.master_arbitration_;
        ext_.master_arbitration_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void
Extension::unsafe_arena_set_allocated_master_arbitration(::gnmi_ext::MasterArbitration *master_arbitration)
{
    clear_ext();
    if (master_arbitration) {
        set_has_master_arbitration();
        ext_.master_arbitration_ = master_arbitration;
    }
    /* @@protoc_insertion_point(field_unsafe_arena_set_allocated:gnmi_ext.Extension.master_arbitration) */
}
inline ::gnmi_ext::MasterArbitration *Extension::_internal_mutable_master_arbitration() {
    if (!_internal_has_master_arbitration()) {
        clear_ext();
        set_has_master_arbitration();
        ext_.master_arbitration_ = CreateMaybeMessage< ::gnmi_ext::MasterArbitration >(GetArena());
    }
    return ext_.master_arbitration_;
}
inline ::gnmi_ext::MasterArbitration *Extension::mutable_master_arbitration() {
    /* @@protoc_insertion_point(field_mutable:gnmi_ext.Extension.master_arbitration) */
    return _internal_mutable_master_arbitration();
}

inline bool
Extension::has_ext() const
{
    return ext_case() != EXT_NOT_SET;
}
inline void
Extension::clear_has_ext()
{
    _oneof_case_[0] = EXT_NOT_SET;
}
inline Extension::ExtCase
Extension::ext_case() const
{
    return Extension::ExtCase(_oneof_case_[0]);
}
/* ------------------------------------------------------------------- */

/* RegisteredExtension */

/* .gnmi_ext.ExtensionID id = 1; */
inline void
RegisteredExtension::clear_id()
{
    id_ = 0;
}
inline ::gnmi_ext::ExtensionID
RegisteredExtension::_internal_id() const
{
    return static_cast< ::gnmi_ext::ExtensionID >(id_);
}
inline ::gnmi_ext::ExtensionID
RegisteredExtension::id() const
{
    /* @@protoc_insertion_point(field_get:gnmi_ext.RegisteredExtension.id) */
    return _internal_id();
}
inline void
RegisteredExtension::_internal_set_id(::gnmi_ext::ExtensionID value)
{

    id_ = value;
}
inline void
RegisteredExtension::set_id(::gnmi_ext::ExtensionID value)
{
    _internal_set_id(value);
    /* @@protoc_insertion_point(field_set:gnmi_ext.RegisteredExtension.id) */
}

/* bytes msg = 2; */
inline void
RegisteredExtension::clear_msg()
{
    msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string&
RegisteredExtension::msg() const
{
    /* @@protoc_insertion_point(field_get:gnmi_ext.RegisteredExtension.msg) */
    return _internal_msg();
}
inline void
RegisteredExtension::set_msg(const std::string& value)
{
    _internal_set_msg(value);
    /* @@protoc_insertion_point(field_set:gnmi_ext.RegisteredExtension.msg) */
}
inline std::string *
RegisteredExtension::mutable_msg()
{
    /* @@protoc_insertion_point(field_mutable:gnmi_ext.RegisteredExtension.msg) */
    return _internal_mutable_msg();
}
inline const std::string&
RegisteredExtension::_internal_msg() const
{
    return msg_.Get();
}
inline void
RegisteredExtension::_internal_set_msg(const std::string& value)
{

    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void
RegisteredExtension::set_msg(std::string && value)
{

    msg_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
    /* @@protoc_insertion_point(field_set_rvalue:gnmi_ext.RegisteredExtension.msg) */
}
inline void
RegisteredExtension::set_msg(const char *value)
{
    GOOGLE_DCHECK(value != nullptr);

    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
             GetArena());
    /* @@protoc_insertion_point(field_set_char:gnmi_ext.RegisteredExtension.msg) */
}
inline void
RegisteredExtension::set_msg(const void *value,
                             size_t size)
{

    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
                 reinterpret_cast<const char *>(value), size), GetArena());
    /* @@protoc_insertion_point(field_set_pointer:gnmi_ext.RegisteredExtension.msg) */
}
inline std::string *
RegisteredExtension::_internal_mutable_msg()
{

    return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string *
RegisteredExtension::release_msg()
{
    /* @@protoc_insertion_point(field_release:gnmi_ext.RegisteredExtension.msg) */
    return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void
RegisteredExtension::set_allocated_msg(std::string *msg)
{
    if (msg != nullptr) {

    } else {

    }
    msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
                      GetArena());
    /* @@protoc_insertion_point(field_set_allocated:gnmi_ext.RegisteredExtension.msg) */
}
inline std::string *
RegisteredExtension::unsafe_arena_release_msg()
{
    /* @@protoc_insertion_point(field_unsafe_arena_release:gnmi_ext.RegisteredExtension.msg) */
    GOOGLE_DCHECK(GetArena() != nullptr);

    return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                   GetArena());
}
inline void
RegisteredExtension::unsafe_arena_set_allocated_msg(
    std::string *msg)
{
    GOOGLE_DCHECK(GetArena() != nullptr);
    if (msg != nullptr) {

    } else {

    }
    msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                 msg, GetArena());
    /* @@protoc_insertion_point(field_unsafe_arena_set_allocated:gnmi_ext.RegisteredExtension.msg) */
}

/* ------------------------------------------------------------------- */

/* MasterArbitration */

/* .gnmi_ext.Role role = 1; */
inline bool
MasterArbitration::_internal_has_role() const
{
    return this != internal_default_instance() && role_ != nullptr;
}
inline bool
MasterArbitration::has_role() const
{
    return _internal_has_role();
}
inline void
MasterArbitration::clear_role()
{
    if (GetArena() == nullptr && role_ != nullptr) {
        delete role_;
    }
    role_ = nullptr;
}
inline const ::gnmi_ext::Role& MasterArbitration::_internal_role() const {
    const ::gnmi_ext::Role *p = role_;
    return p != nullptr ? *p : *reinterpret_cast<const ::gnmi_ext::Role *>(
               &::gnmi_ext::_Role_default_instance_);
}
inline const ::gnmi_ext::Role& MasterArbitration::role() const {
    /* @@protoc_insertion_point(field_get:gnmi_ext.MasterArbitration.role) */
    return _internal_role();
}
inline void
MasterArbitration::unsafe_arena_set_allocated_role(
    ::gnmi_ext::Role *role)
{
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(role_);
    }
    role_ = role;
    if (role) {

    } else {

    }
    /* @@protoc_insertion_point(field_unsafe_arena_set_allocated:gnmi_ext.MasterArbitration.role) */
}
inline ::gnmi_ext::Role *MasterArbitration::release_role() {
    auto temp = unsafe_arena_release_role();
    if (GetArena() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    return temp;
}
inline ::gnmi_ext::Role *MasterArbitration::unsafe_arena_release_role() {
    /* @@protoc_insertion_point(field_release:gnmi_ext.MasterArbitration.role) */

    ::gnmi_ext::Role *temp = role_;
    role_ = nullptr;
    return temp;
}
inline ::gnmi_ext::Role *MasterArbitration::_internal_mutable_role() {

    if (role_ == nullptr) {
        auto *p = CreateMaybeMessage<::gnmi_ext::Role>(GetArena());
        role_ = p;
    }
    return role_;
}
inline ::gnmi_ext::Role *MasterArbitration::mutable_role() {
    /* @@protoc_insertion_point(field_mutable:gnmi_ext.MasterArbitration.role) */
    return _internal_mutable_role();
}
inline void
MasterArbitration::set_allocated_role(::gnmi_ext::Role *role)
{
    ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
    if (message_arena == nullptr) {
        delete role_;
    }
    if (role) {
        ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(role);
        if (message_arena != submessage_arena) {
            role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, role, submessage_arena);
        }

    } else {

    }
    role_ = role;
    /* @@protoc_insertion_point(field_set_allocated:gnmi_ext.MasterArbitration.role) */
}

/* .gnmi_ext.Uint128 election_id = 2; */
inline bool
MasterArbitration::_internal_has_election_id() const
{
    return this != internal_default_instance() && election_id_ != nullptr;
}
inline bool
MasterArbitration::has_election_id() const
{
    return _internal_has_election_id();
}
inline void
MasterArbitration::clear_election_id()
{
    if (GetArena() == nullptr && election_id_ != nullptr) {
        delete election_id_;
    }
    election_id_ = nullptr;
}
inline const ::gnmi_ext::Uint128& MasterArbitration::_internal_election_id() const {
    const ::gnmi_ext::Uint128 *p = election_id_;
    return p != nullptr ? *p : *reinterpret_cast<const ::gnmi_ext::Uint128 *>(
               &::gnmi_ext::_Uint128_default_instance_);
}
inline const ::gnmi_ext::Uint128& MasterArbitration::election_id() const {
    /* @@protoc_insertion_point(field_get:gnmi_ext.MasterArbitration.election_id) */
    return _internal_election_id();
}
inline void
MasterArbitration::unsafe_arena_set_allocated_election_id(
    ::gnmi_ext::Uint128 *election_id)
{
    if (GetArena() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(election_id_);
    }
    election_id_ = election_id;
    if (election_id) {

    } else {

    }
    /* @@protoc_insertion_point(field_unsafe_arena_set_allocated:gnmi_ext.MasterArbitration.election_id) */
}
inline ::gnmi_ext::Uint128 *MasterArbitration::release_election_id() {
    auto temp = unsafe_arena_release_election_id();
    if (GetArena() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    return temp;
}
inline ::gnmi_ext::Uint128 *MasterArbitration::unsafe_arena_release_election_id() {
    /* @@protoc_insertion_point(field_release:gnmi_ext.MasterArbitration.election_id) */

    ::gnmi_ext::Uint128 *temp = election_id_;
    election_id_ = nullptr;
    return temp;
}
inline ::gnmi_ext::Uint128 *MasterArbitration::_internal_mutable_election_id() {

    if (election_id_ == nullptr) {
        auto *p = CreateMaybeMessage<::gnmi_ext::Uint128>(GetArena());
        election_id_ = p;
    }
    return election_id_;
}
inline ::gnmi_ext::Uint128 *MasterArbitration::mutable_election_id() {
    /* @@protoc_insertion_point(field_mutable:gnmi_ext.MasterArbitration.election_id) */
    return _internal_mutable_election_id();
}
inline void
MasterArbitration::set_allocated_election_id(::gnmi_ext::Uint128 *election_id)
{
    ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
    if (message_arena == nullptr) {
        delete election_id_;
    }
    if (election_id) {
        ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(election_id);
        if (message_arena != submessage_arena) {
            election_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, election_id, submessage_arena);
        }

    } else {

    }
    election_id_ = election_id;
    /* @@protoc_insertion_point(field_set_allocated:gnmi_ext.MasterArbitration.election_id) */
}

/* ------------------------------------------------------------------- */

/* Uint128 */

/* uint64 high = 1; */
inline void
Uint128::clear_high()
{
    high_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64
Uint128::_internal_high() const
{
    return high_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64
Uint128::high() const
{
    /* @@protoc_insertion_point(field_get:gnmi_ext.Uint128.high) */
    return _internal_high();
}
inline void
Uint128::_internal_set_high(::PROTOBUF_NAMESPACE_ID::uint64 value)
{

    high_ = value;
}
inline void
Uint128::set_high(::PROTOBUF_NAMESPACE_ID::uint64 value)
{
    _internal_set_high(value);
    /* @@protoc_insertion_point(field_set:gnmi_ext.Uint128.high) */
}

/* uint64 low = 2; */
inline void
Uint128::clear_low()
{
    low_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64
Uint128::_internal_low() const
{
    return low_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64
Uint128::low() const
{
    /* @@protoc_insertion_point(field_get:gnmi_ext.Uint128.low) */
    return _internal_low();
}
inline void
Uint128::_internal_set_low(::PROTOBUF_NAMESPACE_ID::uint64 value)
{

    low_ = value;
}
inline void
Uint128::set_low(::PROTOBUF_NAMESPACE_ID::uint64 value)
{
    _internal_set_low(value);
    /* @@protoc_insertion_point(field_set:gnmi_ext.Uint128.low) */
}

/* ------------------------------------------------------------------- */

/* Role */

/* string id = 1; */
inline void
Role::clear_id()
{
    id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string&
Role::id() const
{
    /* @@protoc_insertion_point(field_get:gnmi_ext.Role.id) */
    return _internal_id();
}
inline void
Role::set_id(const std::string& value)
{
    _internal_set_id(value);
    /* @@protoc_insertion_point(field_set:gnmi_ext.Role.id) */
}
inline std::string *
Role::mutable_id()
{
    /* @@protoc_insertion_point(field_mutable:gnmi_ext.Role.id) */
    return _internal_mutable_id();
}
inline const std::string&
Role::_internal_id() const
{
    return id_.Get();
}
inline void
Role::_internal_set_id(const std::string& value)
{

    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void
Role::set_id(std::string && value)
{

    id_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
    /* @@protoc_insertion_point(field_set_rvalue:gnmi_ext.Role.id) */
}
inline void
Role::set_id(const char *value)
{
    GOOGLE_DCHECK(value != nullptr);

    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
            GetArena());
    /* @@protoc_insertion_point(field_set_char:gnmi_ext.Role.id) */
}
inline void
Role::set_id(const char *value,
             size_t size)
{

    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
                reinterpret_cast<const char *>(value), size), GetArena());
    /* @@protoc_insertion_point(field_set_pointer:gnmi_ext.Role.id) */
}
inline std::string *
Role::_internal_mutable_id()
{

    return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string *
Role::release_id()
{
    /* @@protoc_insertion_point(field_release:gnmi_ext.Role.id) */
    return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void
Role::set_allocated_id(std::string *id)
{
    if (id != nullptr) {

    } else {

    }
    id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
                     GetArena());
    /* @@protoc_insertion_point(field_set_allocated:gnmi_ext.Role.id) */
}
inline std::string *
Role::unsafe_arena_release_id()
{
    /* @@protoc_insertion_point(field_unsafe_arena_release:gnmi_ext.Role.id) */
    GOOGLE_DCHECK(GetArena() != nullptr);

    return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                  GetArena());
}
inline void
Role::unsafe_arena_set_allocated_id(
    std::string *id)
{
    GOOGLE_DCHECK(GetArena() != nullptr);
    if (id != nullptr) {

    } else {

    }
    id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                id, GetArena());
    /* @@protoc_insertion_point(field_unsafe_arena_set_allocated:gnmi_ext.Role.id) */
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  /* __GNUC__ */
/* ------------------------------------------------------------------- */

/* ------------------------------------------------------------------- */

/* ------------------------------------------------------------------- */

/* ------------------------------------------------------------------- */


/* @@protoc_insertion_point(namespace_scope) */

}  /* namespace gnmi_ext */

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::gnmi_ext::ExtensionID> : ::std::true_type {};
template <>
inline const EnumDescriptor *GetEnumDescriptor< ::gnmi_ext::ExtensionID
                                                >()
{
    return ::gnmi_ext::ExtensionID_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

/* @@protoc_insertion_point(global_scope) */

#include <google/protobuf/port_undef.inc>
#endif  /* GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gnmi_5fext_2eproto */
